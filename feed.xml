<feed xmlns="http://www.w3.org/2005/Atom"> <id>/</id><title>EsharkyTheGreat's Personal Blog</title><subtitle>A Blog of a Cyber Sec Enthusiast | Interested in Binary Exploitation Part of IIT(BHU)CyberSec | Interested in Operating Systems, Full Stack Development, Playing CTF's and Computers in general</subtitle> <updated>2022-09-04T14:36:02+05:30</updated> <author> <name>EsharkyTheGreat</name> <uri>/</uri> </author><link rel="self" type="application/atom+xml" href="/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="/"/> <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator> <rights> © 2022 EsharkyTheGreat </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>CakeCTF-22 Pwn welkerme</title><link href="/posts/CakeCTF-2022-welkerme/" rel="alternate" type="text/html" title="CakeCTF-22 Pwn welkerme" /><published>2022-09-04T14:04:00+05:30</published> <updated>2022-09-04T14:04:00+05:30</updated> <id>/posts/CakeCTF-2022-welkerme/</id> <content src="/posts/CakeCTF-2022-welkerme/" /> <author> <name>EsharkyTheGreat</name> </author> <category term="Pwn" /> <summary> Challenge Overview welkerme is a basic introduction to kernel exploitation type of CTF challenge, the challenge files provided itself have so much information to solve the challenge. Challenge Files We are given linux kernel bzImage, a fs and a vulnerable driver installed in it along with its source code. We are also given scripts to launch the kernel in qemu in debug and normal mode The Vuln... </summary> </entry> <entry><title>DefCamp-21 Blindsight Writeup</title><link href="/posts/DefCamp-21-Blindsight/" rel="alternate" type="text/html" title="DefCamp-21 Blindsight Writeup" /><published>2022-02-14T16:17:00+05:30</published> <updated>2022-02-14T17:34:20+05:30</updated> <id>/posts/DefCamp-21-Blindsight/</id> <content src="/posts/DefCamp-21-Blindsight/" /> <author> <name>EsharkyTheGreat</name> </author> <category term="Pwn" /> <summary> Challenge Overview This is a writeup of the blindsight challenge from DefCamp-21. The challenge only provides us with a libc.so file and the ip and port of a server. We need to find a way to connect to the server and get a shell without the binary running on it Recon We can connect to the server using the netcat command nc &amp;lt;ip&amp;gt; &amp;lt;port&amp;gt; We see that when we provide input of sma... </summary> </entry> <entry><title>PwnAdventure Part5 - More Hacks!!</title><link href="/posts/pwn-adventure-part5/" rel="alternate" type="text/html" title="PwnAdventure Part5 - More Hacks!!" /><published>2022-02-10T16:48:00+05:30</published> <updated>2022-02-10T16:48:00+05:30</updated> <id>/posts/pwn-adventure-part5/</id> <content src="/posts/pwn-adventure-part5/" /> <author> <name>EsharkyTheGreat</name> </author> <category term="Pwn" /> <summary> Developing More Hacks In the previous post I went over LD_PRELOAD to hijack functions and created the speed hack. In this post I’m going over and understanding other hacks that LiveOverflow made i.e fly hack and teleportation hack. Creating our Fly Hack Like the previous hack we can just hook the World::tick() function access the global GameWorld variable and edit m_jumpSpeed and m_jumpHoldT... </summary> </entry> <entry><title>PwnAdventure Part4 - Function Hijacking</title><link href="/posts/pwn-adventure-part4/" rel="alternate" type="text/html" title="PwnAdventure Part4 - Function Hijacking" /><published>2022-01-27T12:02:00+05:30</published> <updated>2022-01-27T12:02:00+05:30</updated> <id>/posts/pwn-adventure-part4/</id> <content src="/posts/pwn-adventure-part4/" /> <author> <name>EsharkyTheGreat</name> </author> <category term="Pwn" /> <summary> Developing our First Hack In this post I’m going over our first step to develop a hack. The way we are going to do it is we are going to overwrite functions in the libGameLogic.so by writing our own library and the LD_PRELOAD in it. This is why we built the header file to get the correct offsets of objects and getting the function definitions. Testing LD_PRELOAD Let’s test our LD_PRELOAD fun... </summary> </entry> <entry><title>PwnAdventure Part3 - Memory and Structs</title><link href="/posts/pwn-adventure-part3/" rel="alternate" type="text/html" title="PwnAdventure Part3 - Memory and Structs" /><published>2022-01-23T16:28:00+05:30</published> <updated>2022-01-23T18:26:38+05:30</updated> <id>/posts/pwn-adventure-part3/</id> <content src="/posts/pwn-adventure-part3/" /> <author> <name>EsharkyTheGreat</name> </author> <category term="Pwn" /> <summary> What we’re going to do Now that we have an overview of the game lets load the libGameLogic library in a disassembler. I’m using IDA for this. Since we have debug information we’ll get all the classes,structs and functions in a headerfile so that we can use the offsets properly. This is very important because I tried without getting the classes and it was just tedious. Disassembly If we open ... </summary> </entry> </feed>
